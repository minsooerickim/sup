Terminals unused in grammar

   ARRAY
   MULTILINE_COMMENT


State 0 conflicts: 1 reduce/reduce
State 41 conflicts: 2 reduce/reduce
State 73 conflicts: 1 reduce/reduce
State 101 conflicts: 1 reduce/reduce
State 108 conflicts: 2 shift/reduce
State 121 conflicts: 2 shift/reduce
State 134 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions
    3           | statements

    4 functions: function
    5          | function functions

    6 function: IDENT L_PARENT arguments R_PARENT INT BRACKET statements BRACKET

    7 arguments: %empty
    8          | argument repeat_arguments

    9 repeat_arguments: %empty
   10                 | COMMA argument repeat_arguments

   11 argument: %empty
   12         | INT IDENT

   13 statements: %empty
   14           | statement SEMICOLON statements

   15 statement: %empty
   16          | declaration
   17          | function_call
   18          | return
   19          | array_access
   20          | assignment
   21          | operations
   22          | ifs
   23          | whiles
   24          | read
   25          | write

   26 declaration: INT IDENT
   27            | INT IDENT L_BRACKET array_size R_BRACKET

   28 array_size: %empty
   29           | INTEGER

   30 function_call: IDENT L_PARENT args R_PARENT

   31 args: %empty
   32     | arg repeat_args

   33 repeat_args: %empty
   34            | COMMA arg repeat_args

   35 arg: %empty
   36    | IDENT

   37 ifs: if
   38    | if ifs

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

   40 whiles: while
   41       | while whiles

   42 while: WHILE L_PARENT comparison R_PARENT BRACKET ifactions BRACKET

   43 comparison: IDENT compare IDENT
   44           | IDENT compare INTEGER
   45           | INTEGER compare IDENT
   46           | INTEGER compare INTEGER

   47 compare: EQ
   48        | GT
   49        | LT
   50        | GTE
   51        | LTE
   52        | NEQ

   53 ifactions: statements
   54          | statements BREAK SEMICOLON
   55          | statements CONTINUE SEMICOLON
   56          | BREAK SEMICOLON
   57          | CONTINUE SEMICOLON

   58 read: READ IDENT SEMICOLON

   59 write: WRITE QUOTE content QUOTE SEMICOLON
   60      | WRITE IDENT content SEMICOLON

   61 content: %empty
   62        | NEWLINE

   63 array_access: IDENT L_BRACKET INTEGER R_BRACKET

   64 assignment: IDENT ASSIGNMENT IDENT
   65           | IDENT ASSIGNMENT INTEGER
   66           | INT IDENT ASSIGNMENT IDENT
   67           | INT IDENT ASSIGNMENT INTEGER
   68           | IDENT ASSIGNMENT operations
   69           | INT IDENT ASSIGNMENT operations

   70 operations: IDENT operation IDENT
   71           | IDENT operation INTEGER
   72           | INTEGER operation IDENT
   73           | INTEGER operation INTEGER

   74 operation: ADD
   75          | SUB
   76          | MULT
   77          | DIV
   78          | MOD

   79 return: RETURN IDENT


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 6 12 26 27 66 67 69
INTEGER (259) 29 44 45 46 63 65 67 71 72 73
ARRAY (260)
SEMICOLON (261) 14 54 55 56 57 58 59 60
BRACKET (262) 6 39 42
COMMA (263) 10 34
QUOTE (264) 59
SUB (265) 75
ADD (266) 74
MULT (267) 76
DIV (268) 77
MOD (269) 78
ASSIGNMENT (270) 64 65 66 67 68 69
NEQ (271) 52
LT (272) 49
GT (273) 48
LTE (274) 51
GTE (275) 50
EQ (276) 47
IF (277) 39
THEN (278) 39
ELSE (279) 39
WHILE (280) 42
CONTINUE (281) 55 57
BREAK (282) 54 56
READ (283) 58
WRITE (284) 59 60
NEWLINE (285) 62
RETURN (286) 79
L_BRACKET (287) 27 63
R_BRACKET (288) 27 63
L_PARENT (289) 6 30 39 42
R_PARENT (290) 6 30 39 42
IDENT (291) 6 12 26 27 30 36 43 44 45 58 60 63 64 65 66 67 68 69 70
    71 72 79
MULTILINE_COMMENT (292)


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
prog_start (39)
    on left: 1 2 3, on right: 0
functions (40)
    on left: 4 5, on right: 2 5
function (41)
    on left: 6, on right: 4 5
arguments (42)
    on left: 7 8, on right: 6
repeat_arguments (43)
    on left: 9 10, on right: 8 10
argument (44)
    on left: 11 12, on right: 8 10
statements (45)
    on left: 13 14, on right: 3 6 14 53 54 55
statement (46)
    on left: 15 16 17 18 19 20 21 22 23 24 25, on right: 14
declaration (47)
    on left: 26 27, on right: 16
array_size (48)
    on left: 28 29, on right: 27
function_call (49)
    on left: 30, on right: 17
args (50)
    on left: 31 32, on right: 30
repeat_args (51)
    on left: 33 34, on right: 32 34
arg (52)
    on left: 35 36, on right: 32 34
ifs (53)
    on left: 37 38, on right: 22 38
if (54)
    on left: 39, on right: 37 38
whiles (55)
    on left: 40 41, on right: 23 41
while (56)
    on left: 42, on right: 40 41
comparison (57)
    on left: 43 44 45 46, on right: 39 42
compare (58)
    on left: 47 48 49 50 51 52, on right: 43 44 45 46
ifactions (59)
    on left: 53 54 55 56 57, on right: 39 42
read (60)
    on left: 58, on right: 24
write (61)
    on left: 59 60, on right: 25
content (62)
    on left: 61 62, on right: 59 60
array_access (63)
    on left: 63, on right: 19
assignment (64)
    on left: 64 65 66 67 68 69, on right: 20
operations (65)
    on left: 70 71 72 73, on right: 21 68 69
operation (66)
    on left: 74 75 76 77 78, on right: 70 71 72 73
return (67)
    on left: 79, on right: 18


State 0

    0 $accept: . prog_start $end

    INT      shift, and go to state 1
    INTEGER  shift, and go to state 2
    IF       shift, and go to state 3
    WHILE    shift, and go to state 4
    READ     shift, and go to state 5
    WRITE    shift, and go to state 6
    RETURN   shift, and go to state 7
    IDENT    shift, and go to state 8

    $end       reduce using rule 1 (prog_start)
    $end       [reduce using rule 13 (statements)]
    SEMICOLON  reduce using rule 15 (statement)
    $default   reduce using rule 1 (prog_start)

    prog_start     go to state 9
    functions      go to state 10
    function       go to state 11
    statements     go to state 12
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 1

   26 declaration: INT . IDENT
   27            | INT . IDENT L_BRACKET array_size R_BRACKET
   66 assignment: INT . IDENT ASSIGNMENT IDENT
   67           | INT . IDENT ASSIGNMENT INTEGER
   69           | INT . IDENT ASSIGNMENT operations

    IDENT  shift, and go to state 26


State 2

   72 operations: INTEGER . operation IDENT
   73           | INTEGER . operation INTEGER

    SUB   shift, and go to state 27
    ADD   shift, and go to state 28
    MULT  shift, and go to state 29
    DIV   shift, and go to state 30
    MOD   shift, and go to state 31

    operation  go to state 32


State 3

   39 if: IF . L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    L_PARENT  shift, and go to state 33


State 4

   42 while: WHILE . L_PARENT comparison R_PARENT BRACKET ifactions BRACKET

    L_PARENT  shift, and go to state 34


State 5

   58 read: READ . IDENT SEMICOLON

    IDENT  shift, and go to state 35


State 6

   59 write: WRITE . QUOTE content QUOTE SEMICOLON
   60      | WRITE . IDENT content SEMICOLON

    QUOTE  shift, and go to state 36
    IDENT  shift, and go to state 37


State 7

   79 return: RETURN . IDENT

    IDENT  shift, and go to state 38


State 8

    6 function: IDENT . L_PARENT arguments R_PARENT INT BRACKET statements BRACKET
   30 function_call: IDENT . L_PARENT args R_PARENT
   63 array_access: IDENT . L_BRACKET INTEGER R_BRACKET
   64 assignment: IDENT . ASSIGNMENT IDENT
   65           | IDENT . ASSIGNMENT INTEGER
   68           | IDENT . ASSIGNMENT operations
   70 operations: IDENT . operation IDENT
   71           | IDENT . operation INTEGER

    SUB         shift, and go to state 27
    ADD         shift, and go to state 28
    MULT        shift, and go to state 29
    DIV         shift, and go to state 30
    MOD         shift, and go to state 31
    ASSIGNMENT  shift, and go to state 39
    L_BRACKET   shift, and go to state 40
    L_PARENT    shift, and go to state 41

    operation  go to state 42


State 9

    0 $accept: prog_start . $end

    $end  shift, and go to state 43


State 10

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 11

    4 functions: function .
    5          | function . functions

    IDENT  shift, and go to state 44

    $default  reduce using rule 4 (functions)

    functions  go to state 45
    function   go to state 11


State 12

    3 prog_start: statements .

    $default  reduce using rule 3 (prog_start)


State 13

   14 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 46


State 14

   16 statement: declaration .

    $default  reduce using rule 16 (statement)


State 15

   17 statement: function_call .

    $default  reduce using rule 17 (statement)


State 16

   22 statement: ifs .

    $default  reduce using rule 22 (statement)


State 17

   37 ifs: if .
   38    | if . ifs

    IF  shift, and go to state 3

    $default  reduce using rule 37 (ifs)

    ifs  go to state 47
    if   go to state 17


State 18

   23 statement: whiles .

    $default  reduce using rule 23 (statement)


State 19

   40 whiles: while .
   41       | while . whiles

    WHILE  shift, and go to state 4

    $default  reduce using rule 40 (whiles)

    whiles  go to state 48
    while   go to state 19


State 20

   24 statement: read .

    $default  reduce using rule 24 (statement)


State 21

   25 statement: write .

    $default  reduce using rule 25 (statement)


State 22

   19 statement: array_access .

    $default  reduce using rule 19 (statement)


State 23

   20 statement: assignment .

    $default  reduce using rule 20 (statement)


State 24

   21 statement: operations .

    $default  reduce using rule 21 (statement)


State 25

   18 statement: return .

    $default  reduce using rule 18 (statement)


State 26

   26 declaration: INT IDENT .
   27            | INT IDENT . L_BRACKET array_size R_BRACKET
   66 assignment: INT IDENT . ASSIGNMENT IDENT
   67           | INT IDENT . ASSIGNMENT INTEGER
   69           | INT IDENT . ASSIGNMENT operations

    ASSIGNMENT  shift, and go to state 49
    L_BRACKET   shift, and go to state 50

    $default  reduce using rule 26 (declaration)


State 27

   75 operation: SUB .

    $default  reduce using rule 75 (operation)


State 28

   74 operation: ADD .

    $default  reduce using rule 74 (operation)


State 29

   76 operation: MULT .

    $default  reduce using rule 76 (operation)


State 30

   77 operation: DIV .

    $default  reduce using rule 77 (operation)


State 31

   78 operation: MOD .

    $default  reduce using rule 78 (operation)


State 32

   72 operations: INTEGER operation . IDENT
   73           | INTEGER operation . INTEGER

    INTEGER  shift, and go to state 51
    IDENT    shift, and go to state 52


State 33

   39 if: IF L_PARENT . comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    INTEGER  shift, and go to state 53
    IDENT    shift, and go to state 54

    comparison  go to state 55


State 34

   42 while: WHILE L_PARENT . comparison R_PARENT BRACKET ifactions BRACKET

    INTEGER  shift, and go to state 53
    IDENT    shift, and go to state 54

    comparison  go to state 56


State 35

   58 read: READ IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 57


State 36

   59 write: WRITE QUOTE . content QUOTE SEMICOLON

    NEWLINE  shift, and go to state 58

    $default  reduce using rule 61 (content)

    content  go to state 59


State 37

   60 write: WRITE IDENT . content SEMICOLON

    NEWLINE  shift, and go to state 58

    $default  reduce using rule 61 (content)

    content  go to state 60


State 38

   79 return: RETURN IDENT .

    $default  reduce using rule 79 (return)


State 39

   64 assignment: IDENT ASSIGNMENT . IDENT
   65           | IDENT ASSIGNMENT . INTEGER
   68           | IDENT ASSIGNMENT . operations

    INTEGER  shift, and go to state 61
    IDENT    shift, and go to state 62

    operations  go to state 63


State 40

   63 array_access: IDENT L_BRACKET . INTEGER R_BRACKET

    INTEGER  shift, and go to state 64


State 41

    6 function: IDENT L_PARENT . arguments R_PARENT INT BRACKET statements BRACKET
   30 function_call: IDENT L_PARENT . args R_PARENT

    INT    shift, and go to state 65
    IDENT  shift, and go to state 66

    COMMA     reduce using rule 11 (argument)
    COMMA     [reduce using rule 35 (arg)]
    R_PARENT  reduce using rule 7 (arguments)
    R_PARENT  [reduce using rule 11 (argument)]
    R_PARENT  [reduce using rule 31 (args)]
    R_PARENT  [reduce using rule 35 (arg)]
    $default  reduce using rule 7 (arguments)

    arguments  go to state 67
    argument   go to state 68
    args       go to state 69
    arg        go to state 70


State 42

   70 operations: IDENT operation . IDENT
   71           | IDENT operation . INTEGER

    INTEGER  shift, and go to state 71
    IDENT    shift, and go to state 72


State 43

    0 $accept: prog_start $end .

    $default  accept


State 44

    6 function: IDENT . L_PARENT arguments R_PARENT INT BRACKET statements BRACKET

    L_PARENT  shift, and go to state 73


State 45

    5 functions: function functions .

    $default  reduce using rule 5 (functions)


State 46

   14 statements: statement SEMICOLON . statements

    INT      shift, and go to state 1
    INTEGER  shift, and go to state 2
    IF       shift, and go to state 3
    WHILE    shift, and go to state 4
    READ     shift, and go to state 5
    WRITE    shift, and go to state 6
    RETURN   shift, and go to state 7
    IDENT    shift, and go to state 74

    SEMICOLON  reduce using rule 15 (statement)
    $default   reduce using rule 13 (statements)

    statements     go to state 75
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 47

   38 ifs: if ifs .

    $default  reduce using rule 38 (ifs)


State 48

   41 whiles: while whiles .

    $default  reduce using rule 41 (whiles)


State 49

   66 assignment: INT IDENT ASSIGNMENT . IDENT
   67           | INT IDENT ASSIGNMENT . INTEGER
   69           | INT IDENT ASSIGNMENT . operations

    INTEGER  shift, and go to state 76
    IDENT    shift, and go to state 77

    operations  go to state 78


State 50

   27 declaration: INT IDENT L_BRACKET . array_size R_BRACKET

    INTEGER  shift, and go to state 79

    $default  reduce using rule 28 (array_size)

    array_size  go to state 80


State 51

   73 operations: INTEGER operation INTEGER .

    $default  reduce using rule 73 (operations)


State 52

   72 operations: INTEGER operation IDENT .

    $default  reduce using rule 72 (operations)


State 53

   45 comparison: INTEGER . compare IDENT
   46           | INTEGER . compare INTEGER

    NEQ  shift, and go to state 81
    LT   shift, and go to state 82
    GT   shift, and go to state 83
    LTE  shift, and go to state 84
    GTE  shift, and go to state 85
    EQ   shift, and go to state 86

    compare  go to state 87


State 54

   43 comparison: IDENT . compare IDENT
   44           | IDENT . compare INTEGER

    NEQ  shift, and go to state 81
    LT   shift, and go to state 82
    GT   shift, and go to state 83
    LTE  shift, and go to state 84
    GTE  shift, and go to state 85
    EQ   shift, and go to state 86

    compare  go to state 88


State 55

   39 if: IF L_PARENT comparison . R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    R_PARENT  shift, and go to state 89


State 56

   42 while: WHILE L_PARENT comparison . R_PARENT BRACKET ifactions BRACKET

    R_PARENT  shift, and go to state 90


State 57

   58 read: READ IDENT SEMICOLON .

    $default  reduce using rule 58 (read)


State 58

   62 content: NEWLINE .

    $default  reduce using rule 62 (content)


State 59

   59 write: WRITE QUOTE content . QUOTE SEMICOLON

    QUOTE  shift, and go to state 91


State 60

   60 write: WRITE IDENT content . SEMICOLON

    SEMICOLON  shift, and go to state 92


State 61

   65 assignment: IDENT ASSIGNMENT INTEGER .
   72 operations: INTEGER . operation IDENT
   73           | INTEGER . operation INTEGER

    SUB   shift, and go to state 27
    ADD   shift, and go to state 28
    MULT  shift, and go to state 29
    DIV   shift, and go to state 30
    MOD   shift, and go to state 31

    $default  reduce using rule 65 (assignment)

    operation  go to state 32


State 62

   64 assignment: IDENT ASSIGNMENT IDENT .
   70 operations: IDENT . operation IDENT
   71           | IDENT . operation INTEGER

    SUB   shift, and go to state 27
    ADD   shift, and go to state 28
    MULT  shift, and go to state 29
    DIV   shift, and go to state 30
    MOD   shift, and go to state 31

    $default  reduce using rule 64 (assignment)

    operation  go to state 42


State 63

   68 assignment: IDENT ASSIGNMENT operations .

    $default  reduce using rule 68 (assignment)


State 64

   63 array_access: IDENT L_BRACKET INTEGER . R_BRACKET

    R_BRACKET  shift, and go to state 93


State 65

   12 argument: INT . IDENT

    IDENT  shift, and go to state 94


State 66

   36 arg: IDENT .

    $default  reduce using rule 36 (arg)


State 67

    6 function: IDENT L_PARENT arguments . R_PARENT INT BRACKET statements BRACKET

    R_PARENT  shift, and go to state 95


State 68

    8 arguments: argument . repeat_arguments

    COMMA  shift, and go to state 96

    $default  reduce using rule 9 (repeat_arguments)

    repeat_arguments  go to state 97


State 69

   30 function_call: IDENT L_PARENT args . R_PARENT

    R_PARENT  shift, and go to state 98


State 70

   32 args: arg . repeat_args

    COMMA  shift, and go to state 99

    $default  reduce using rule 33 (repeat_args)

    repeat_args  go to state 100


State 71

   71 operations: IDENT operation INTEGER .

    $default  reduce using rule 71 (operations)


State 72

   70 operations: IDENT operation IDENT .

    $default  reduce using rule 70 (operations)


State 73

    6 function: IDENT L_PARENT . arguments R_PARENT INT BRACKET statements BRACKET

    INT  shift, and go to state 65

    COMMA     reduce using rule 11 (argument)
    R_PARENT  reduce using rule 7 (arguments)
    R_PARENT  [reduce using rule 11 (argument)]
    $default  reduce using rule 7 (arguments)

    arguments  go to state 67
    argument   go to state 68


State 74

   30 function_call: IDENT . L_PARENT args R_PARENT
   63 array_access: IDENT . L_BRACKET INTEGER R_BRACKET
   64 assignment: IDENT . ASSIGNMENT IDENT
   65           | IDENT . ASSIGNMENT INTEGER
   68           | IDENT . ASSIGNMENT operations
   70 operations: IDENT . operation IDENT
   71           | IDENT . operation INTEGER

    SUB         shift, and go to state 27
    ADD         shift, and go to state 28
    MULT        shift, and go to state 29
    DIV         shift, and go to state 30
    MOD         shift, and go to state 31
    ASSIGNMENT  shift, and go to state 39
    L_BRACKET   shift, and go to state 40
    L_PARENT    shift, and go to state 101

    operation  go to state 42


State 75

   14 statements: statement SEMICOLON statements .

    $default  reduce using rule 14 (statements)


State 76

   67 assignment: INT IDENT ASSIGNMENT INTEGER .
   72 operations: INTEGER . operation IDENT
   73           | INTEGER . operation INTEGER

    SUB   shift, and go to state 27
    ADD   shift, and go to state 28
    MULT  shift, and go to state 29
    DIV   shift, and go to state 30
    MOD   shift, and go to state 31

    $default  reduce using rule 67 (assignment)

    operation  go to state 32


State 77

   66 assignment: INT IDENT ASSIGNMENT IDENT .
   70 operations: IDENT . operation IDENT
   71           | IDENT . operation INTEGER

    SUB   shift, and go to state 27
    ADD   shift, and go to state 28
    MULT  shift, and go to state 29
    DIV   shift, and go to state 30
    MOD   shift, and go to state 31

    $default  reduce using rule 66 (assignment)

    operation  go to state 42


State 78

   69 assignment: INT IDENT ASSIGNMENT operations .

    $default  reduce using rule 69 (assignment)


State 79

   29 array_size: INTEGER .

    $default  reduce using rule 29 (array_size)


State 80

   27 declaration: INT IDENT L_BRACKET array_size . R_BRACKET

    R_BRACKET  shift, and go to state 102


State 81

   52 compare: NEQ .

    $default  reduce using rule 52 (compare)


State 82

   49 compare: LT .

    $default  reduce using rule 49 (compare)


State 83

   48 compare: GT .

    $default  reduce using rule 48 (compare)


State 84

   51 compare: LTE .

    $default  reduce using rule 51 (compare)


State 85

   50 compare: GTE .

    $default  reduce using rule 50 (compare)


State 86

   47 compare: EQ .

    $default  reduce using rule 47 (compare)


State 87

   45 comparison: INTEGER compare . IDENT
   46           | INTEGER compare . INTEGER

    INTEGER  shift, and go to state 103
    IDENT    shift, and go to state 104


State 88

   43 comparison: IDENT compare . IDENT
   44           | IDENT compare . INTEGER

    INTEGER  shift, and go to state 105
    IDENT    shift, and go to state 106


State 89

   39 if: IF L_PARENT comparison R_PARENT . BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    BRACKET  shift, and go to state 107


State 90

   42 while: WHILE L_PARENT comparison R_PARENT . BRACKET ifactions BRACKET

    BRACKET  shift, and go to state 108


State 91

   59 write: WRITE QUOTE content QUOTE . SEMICOLON

    SEMICOLON  shift, and go to state 109


State 92

   60 write: WRITE IDENT content SEMICOLON .

    $default  reduce using rule 60 (write)


State 93

   63 array_access: IDENT L_BRACKET INTEGER R_BRACKET .

    $default  reduce using rule 63 (array_access)


State 94

   12 argument: INT IDENT .

    $default  reduce using rule 12 (argument)


State 95

    6 function: IDENT L_PARENT arguments R_PARENT . INT BRACKET statements BRACKET

    INT  shift, and go to state 110


State 96

   10 repeat_arguments: COMMA . argument repeat_arguments

    INT  shift, and go to state 65

    $default  reduce using rule 11 (argument)

    argument  go to state 111


State 97

    8 arguments: argument repeat_arguments .

    $default  reduce using rule 8 (arguments)


State 98

   30 function_call: IDENT L_PARENT args R_PARENT .

    $default  reduce using rule 30 (function_call)


State 99

   34 repeat_args: COMMA . arg repeat_args

    IDENT  shift, and go to state 66

    $default  reduce using rule 35 (arg)

    arg  go to state 112


State 100

   32 args: arg repeat_args .

    $default  reduce using rule 32 (args)


State 101

   30 function_call: IDENT L_PARENT . args R_PARENT

    IDENT  shift, and go to state 66

    COMMA     reduce using rule 35 (arg)
    R_PARENT  reduce using rule 31 (args)
    R_PARENT  [reduce using rule 35 (arg)]
    $default  reduce using rule 31 (args)

    args  go to state 69
    arg   go to state 70


State 102

   27 declaration: INT IDENT L_BRACKET array_size R_BRACKET .

    $default  reduce using rule 27 (declaration)


State 103

   46 comparison: INTEGER compare INTEGER .

    $default  reduce using rule 46 (comparison)


State 104

   45 comparison: INTEGER compare IDENT .

    $default  reduce using rule 45 (comparison)


State 105

   44 comparison: IDENT compare INTEGER .

    $default  reduce using rule 44 (comparison)


State 106

   43 comparison: IDENT compare IDENT .

    $default  reduce using rule 43 (comparison)


State 107

   39 if: IF L_PARENT comparison R_PARENT BRACKET . THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    THEN  shift, and go to state 113


State 108

   42 while: WHILE L_PARENT comparison R_PARENT BRACKET . ifactions BRACKET

    INT       shift, and go to state 1
    INTEGER   shift, and go to state 2
    IF        shift, and go to state 3
    WHILE     shift, and go to state 4
    CONTINUE  shift, and go to state 114
    BREAK     shift, and go to state 115
    READ      shift, and go to state 5
    WRITE     shift, and go to state 6
    RETURN    shift, and go to state 7
    IDENT     shift, and go to state 74

    SEMICOLON  reduce using rule 15 (statement)
    CONTINUE   [reduce using rule 13 (statements)]
    BREAK      [reduce using rule 13 (statements)]
    $default   reduce using rule 13 (statements)

    statements     go to state 116
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    ifactions      go to state 117
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 109

   59 write: WRITE QUOTE content QUOTE SEMICOLON .

    $default  reduce using rule 59 (write)


State 110

    6 function: IDENT L_PARENT arguments R_PARENT INT . BRACKET statements BRACKET

    BRACKET  shift, and go to state 118


State 111

   10 repeat_arguments: COMMA argument . repeat_arguments

    COMMA  shift, and go to state 96

    $default  reduce using rule 9 (repeat_arguments)

    repeat_arguments  go to state 119


State 112

   34 repeat_args: COMMA arg . repeat_args

    COMMA  shift, and go to state 99

    $default  reduce using rule 33 (repeat_args)

    repeat_args  go to state 120


State 113

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN . BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    BRACKET  shift, and go to state 121


State 114

   57 ifactions: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 122


State 115

   56 ifactions: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 123


State 116

   53 ifactions: statements .
   54          | statements . BREAK SEMICOLON
   55          | statements . CONTINUE SEMICOLON

    CONTINUE  shift, and go to state 124
    BREAK     shift, and go to state 125

    $default  reduce using rule 53 (ifactions)


State 117

   42 while: WHILE L_PARENT comparison R_PARENT BRACKET ifactions . BRACKET

    BRACKET  shift, and go to state 126


State 118

    6 function: IDENT L_PARENT arguments R_PARENT INT BRACKET . statements BRACKET

    INT      shift, and go to state 1
    INTEGER  shift, and go to state 2
    IF       shift, and go to state 3
    WHILE    shift, and go to state 4
    READ     shift, and go to state 5
    WRITE    shift, and go to state 6
    RETURN   shift, and go to state 7
    IDENT    shift, and go to state 74

    SEMICOLON  reduce using rule 15 (statement)
    $default   reduce using rule 13 (statements)

    statements     go to state 127
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 119

   10 repeat_arguments: COMMA argument repeat_arguments .

    $default  reduce using rule 10 (repeat_arguments)


State 120

   34 repeat_args: COMMA arg repeat_args .

    $default  reduce using rule 34 (repeat_args)


State 121

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET . ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    INT       shift, and go to state 1
    INTEGER   shift, and go to state 2
    IF        shift, and go to state 3
    WHILE     shift, and go to state 4
    CONTINUE  shift, and go to state 114
    BREAK     shift, and go to state 115
    READ      shift, and go to state 5
    WRITE     shift, and go to state 6
    RETURN    shift, and go to state 7
    IDENT     shift, and go to state 74

    SEMICOLON  reduce using rule 15 (statement)
    CONTINUE   [reduce using rule 13 (statements)]
    BREAK      [reduce using rule 13 (statements)]
    $default   reduce using rule 13 (statements)

    statements     go to state 116
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    ifactions      go to state 128
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 122

   57 ifactions: CONTINUE SEMICOLON .

    $default  reduce using rule 57 (ifactions)


State 123

   56 ifactions: BREAK SEMICOLON .

    $default  reduce using rule 56 (ifactions)


State 124

   55 ifactions: statements CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 129


State 125

   54 ifactions: statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 130


State 126

   42 while: WHILE L_PARENT comparison R_PARENT BRACKET ifactions BRACKET .

    $default  reduce using rule 42 (while)


State 127

    6 function: IDENT L_PARENT arguments R_PARENT INT BRACKET statements . BRACKET

    BRACKET  shift, and go to state 131


State 128

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions . BRACKET ELSE BRACKET ifactions BRACKET BRACKET

    BRACKET  shift, and go to state 132


State 129

   55 ifactions: statements CONTINUE SEMICOLON .

    $default  reduce using rule 55 (ifactions)


State 130

   54 ifactions: statements BREAK SEMICOLON .

    $default  reduce using rule 54 (ifactions)


State 131

    6 function: IDENT L_PARENT arguments R_PARENT INT BRACKET statements BRACKET .

    $default  reduce using rule 6 (function)


State 132

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET . ELSE BRACKET ifactions BRACKET BRACKET

    ELSE  shift, and go to state 133


State 133

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE . BRACKET ifactions BRACKET BRACKET

    BRACKET  shift, and go to state 134


State 134

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET . ifactions BRACKET BRACKET

    INT       shift, and go to state 1
    INTEGER   shift, and go to state 2
    IF        shift, and go to state 3
    WHILE     shift, and go to state 4
    CONTINUE  shift, and go to state 114
    BREAK     shift, and go to state 115
    READ      shift, and go to state 5
    WRITE     shift, and go to state 6
    RETURN    shift, and go to state 7
    IDENT     shift, and go to state 74

    SEMICOLON  reduce using rule 15 (statement)
    CONTINUE   [reduce using rule 13 (statements)]
    BREAK      [reduce using rule 13 (statements)]
    $default   reduce using rule 13 (statements)

    statements     go to state 116
    statement      go to state 13
    declaration    go to state 14
    function_call  go to state 15
    ifs            go to state 16
    if             go to state 17
    whiles         go to state 18
    while          go to state 19
    ifactions      go to state 135
    read           go to state 20
    write          go to state 21
    array_access   go to state 22
    assignment     go to state 23
    operations     go to state 24
    return         go to state 25


State 135

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions . BRACKET BRACKET

    BRACKET  shift, and go to state 136


State 136

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET . BRACKET

    BRACKET  shift, and go to state 137


State 137

   39 if: IF L_PARENT comparison R_PARENT BRACKET THEN BRACKET ifactions BRACKET ELSE BRACKET ifactions BRACKET BRACKET .

    $default  reduce using rule 39 (if)
